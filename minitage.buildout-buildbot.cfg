#
#
# Note that this buildbot configuration relies on a minitage based project
#
# with the .env instance installed inside (minitage/paster create -t minitage.instances.env pgolf-buildbot)
#
# Concept :
# - install the buildbot minibuild which has the same dependencies as the project
# - this to make your coe archived in the targeted SCM prior to a buildbot build
# - When buildbot is finally installed:
#
#       - Launch the master & the slave::
#            ./bin/buildbot-master start
#            ./bin/buildbot-slave start
#
# - Then the basic build sequence configured here is:
#   1. builds the buildbot in update mode but ingoring all dependencies (at minitage level!)
#      This will rerun the base buildbout (and all its parts) ensuring that most of the buildout is sane
#   2. Run the pgolf.policy & pgolf.skin tests ensuring base code is sane
#   3. Add your tests to the build sequence ;)
#
# See http://pypi.python.org/pypi/mr.developer/1.10#troubleshooting
# Think to either setup the project for mr.developer not to find dirty packages either by:
#   - Giving a password somehow to the subversion user or other SCM
#   - the checkouted-via-mr.developer repositories ignore inputs, so buildout can't be interactive
#     and you ll have problems if mr.developer ask you for a password or for dirty packages
#
#

[buildout]
parts += buildbot-master
         buildbot-slave
         b-pgolf
         bmkdirs
extends=etc/minitage/minitage.cfg etc/base.cfg etc/minitage/minitage.cfg

[buildbot-master]
recipe = collective.buildbot:master
project-name = pgolf Buildbot
project-url = http://www.makina-corpus.com
# allow to force build with the web interface
allow-force = true
port = ${ports:buildbot-master-control}
wport = ${ports:buildbot-master-web}
url = http://${hosts:buildbot-master}:${ports:buildbot-master-web}
public-html = ${buildout:directory}/var/buildbot
slaves =
    buildbot-slave ${buildbot:slave-password}

# uncomment/edit to receive email alerts from builds
#mail-host = smtp.foo.com
#email-notification-sender =     foo@foo.com
#email-notification-recipients = foo@foo.com
# The mode to use for sending mails. Available options are:
# * all Send mail about all builds, both passing and failing
# * failing Only send mail about builds which fail
# * problem  Only send mail about a build which failed when the previous build has passed.
#   If your builds usually pass, then this will only send mail when a problem occurs.
mail-mode = all

# uncomment/edit to receive email alerts from builds on irc
# but also control the bot via irc
#irc-host=irc.freenode.net
#irc-channels=#pgolf
#irc-nickname=pgolf-bbot
#irc-password=pgolf-bbot-p4sswd

[buildbot-slave]
recipe = collective.buildbot:slave
host = ${hosts:buildbot-master}
port = ${ports:buildbot-master-control}
password = ${buildbot:slave-password}

[b-pgolf]
recipe = collective.buildbot:project
slave-names = buildbot-slave
vcs = git
repositories = http://hg.foo.net
build-sequence =
    ${buildout:directory}/../../bin/minimerge  -s
    ${buildout:directory}/../../bin/minimerge  -NRuUv pgolf-buildbot
    ${buildout:directory}/bin/develop up
    ${buildout:directory}/bin/zeoserver-buildbot restart
# if you want to update minitage also you can:
#    - comment the previous minimerge call
#    - uncomment the following lines
#    ${buildout:directory}/../../bin/minimerge  -s
#    ${buildout:directory}/../../bin/minimerge  -uUv pgolf-buildbot
test-sequence=${buildout:directory}/bin/instance-buildbot test -m pgolf.policy
              ${buildout:directory}/bin/instance-buildbot test -m pgolf.skin
# build every 3 hours
cron-scheduler=${crons:buildbot-pgolf}

[zeoserver]
recipe = plone.recipe.zope2zeoserver
zope2-location = ${zope2:location}
zeo-address = ${hosts:zeo-buildbot}:${ports:zeo-buildbot}
zeo-conf-additional =
    %import tempstorage
    <temporarystorage temp>
        name temporary storage for sessioning
    </temporarystorage>


[instance]
http-address = ${hosts:instance-buildbot}:${ports:instance-buildbot}
zeo-client-cache-size = ${cache:zeo-client-cache-size}
zeo-client = on
zeo-address = ${zeoserver:zeo-address}
temporary-storage =
    <zeoclient>
    server  ${zeoserver:zeo-address}
        storage temp
        name zeostorage
        var ${buildout:directory}/var
    </zeoclient>
    mount-point /temp_folder
    container-class Products.TemporaryFolder.TemporaryContainer

[bmkdirs]
recipe = plone.recipe.command
update-command = ${bmkdirs:command}
command=
    mkdir -pv ${locations:buildbot-testfss-backup};
    mkdir -pv ${locations:buildbot-testfss-storage};

# vim: set ft=cfg:
