Index: Products/Archetypes/Registry.py
===================================================================
--- Products/Archetypes/Registry.py	(révision 12134)
+++ Products/Archetypes/Registry.py	(copie de travail)
@@ -1,6 +1,7 @@
 import types
 
-from Products.Archetypes.utils import className
+from Products.Archetypes.utils import className                          
+from Products.Archetypes.utils import interface_implementedby
 from Products.Archetypes.utils import setSecurity
 from Products.Archetypes.ArchetypeTool import listTypes
 from Products.Archetypes.interfaces.base import IBaseObject
@@ -125,7 +126,7 @@
     bases = []
     if hasattr(klass, '__bases__'):
         for b in klass.__bases__:
-            if IBaseObject.isImplementedByInstancesOf(b):
+            if interface_implementedby(IBaseObject, b):
                 bases.append(className(b))
     return bases
 
Index: Products/Archetypes/Extensions/utils.py
===================================================================
--- Products/Archetypes/Extensions/utils.py	(révision 12134)
+++ Products/Archetypes/Extensions/utils.py	(copie de travail)
@@ -15,6 +15,7 @@
 from Products.Archetypes import types_globals
 from Products.Archetypes.interfaces.base import IBaseObject
 from Products.Archetypes.interfaces.ITemplateMixin import ITemplateMixin
+from Products.Archetypes.utils import interface_implementedby
 
 
 class Extra:
@@ -27,7 +28,7 @@
     
     for t in types:
         klass = t['klass']
-        if ITemplateMixin.isImplementedByInstancesOf(klass):
+        if interface_implementedby(ITemplateMixin, klass):
             portal_type = klass.portal_type
             default_view = getattr(klass, 'default_view', 'base_view')
             suppl_views = getattr(klass, 'suppl_views', ())
@@ -299,11 +300,11 @@
         meta_type = rti['meta_type']
 
         isBaseObject = 0
-        if IBaseObject.isImplementedByInstancesOf(t):
+        if interface_implementedby(IBaseObject, t):
             isBaseObject = 1
         else:
             for k in t.__bases__:
-                if IBaseObject.isImplementedByInstancesOf(k):
+                if interface_implementedby(IBaseObject, k):
                     isBaseObject = 1
                     break
 
Index: Products/Archetypes/tests/test_interfaces.py
===================================================================
--- Products/Archetypes/tests/test_interfaces.py	(révision 12134)
+++ Products/Archetypes/tests/test_interfaces.py	(copie de travail)
@@ -47,6 +47,8 @@
 from Products.Archetypes.interfaces.referenceable import *
 from Products.Archetypes.interfaces.storage import *
 
+from Products.Archetypes.utils import interface_implementedby
+
 from Products.Archetypes.BaseObject import BaseObject
 from Products.Archetypes.BaseContent import BaseContent
 from Products.Archetypes.BaseFolder import BaseFolder
@@ -94,7 +96,7 @@
     def interfaceImplementedByInstanceOf(self, klass, interface):
         """ tests if the klass implements the interface in the right way """
         # is the class really implemented by the given interface?
-        self.failUnless(interface.isImplementedByInstancesOf(klass),
+        self.failUnless(interface_implementedby(interface, klass),
             'The class %s does not implement %s' % (className(klass), className(interface)))
         # verify if the implementation is correct
         try:
Index: Products/Archetypes/ArchetypeTool.py
===================================================================
--- Products/Archetypes/ArchetypeTool.py	(révision 12134)
+++ Products/Archetypes/ArchetypeTool.py	(copie de travail)
@@ -26,6 +26,7 @@
 from Products.Archetypes.utils import findDict
 from Products.Archetypes.utils import DisplayList
 from Products.Archetypes.utils import mapply
+from Products.Archetypes.utils import interface_implementedby
 from Products.Archetypes.Renderer import renderer
 
 from Products.CMFCore import permissions
@@ -49,6 +50,7 @@
 from ZODB.POSException import ConflictError
 import transaction
 
+
 class BoundPageTemplateFile(PageTemplateFile):
 
     def __init__(self, *args, **kw):
@@ -233,16 +235,16 @@
     if hasattr(klass, 'immediate_view'):
         fti[0]['immediate_view'] = klass.immediate_view
 
-    if not IReferenceable.isImplementedByInstancesOf(klass):
+    if not interface_implementedby(IReferenceable, klass):
         refs = findDict(fti[0]['actions'], 'id', 'references')
         refs['visible'] = False
 
-    if not IExtensibleMetadata.isImplementedByInstancesOf(klass):
+    if not interface_implementedby(IExtensibleMetadata, klass):
         refs = findDict(fti[0]['actions'], 'id', 'metadata')
         refs['visible'] = False
 
     # Set folder_listing to 'view' if the class implements ITemplateMixin
-    if not ITemplateMixin.isImplementedByInstancesOf(klass):
+    if not interface_implementedby(ITemplateMixin, klass):
         actions = []
         for action in fti[0]['actions']:
             if action['id'] != 'folderlisting':
@@ -664,7 +666,7 @@
         if isinstance(type, dict) and type.has_key('klass'):
             type = type['klass']
         for iface in interfaces:
-            res = iface.isImplementedByInstancesOf(type)
+            res = interface_implementedby(iface, type)
             if res:
                 return True
         return False
@@ -702,7 +704,7 @@
         for data in listTypes():
             klass = data['klass']
             for iface in ifaces:
-                if iface.isImplementedByInstancesOf(klass):
+                if interface_implementedby(iface, klass):
                     ti = pt.getTypeInfo(data['portal_type'])
                     if ti is not None:
                         value.append(ti)
Index: Products/Archetypes/utils.py
===================================================================
--- Products/Archetypes/utils.py	(révision 12134)
+++ Products/Archetypes/utils.py	(copie de travail)
@@ -987,3 +987,12 @@
         return False
     meta_type = getattr(aq_base(parent), 'meta_type', '')
     return meta_type == 'TempFolder'
+
+def interface_implementedby(iface, obj):
+    """Try old then new way to test implements.
+    """
+    try:
+        return iface.isImplementedByInstancesOf(obj)
+    except:
+        return iface.implementedBy(obj)
+
