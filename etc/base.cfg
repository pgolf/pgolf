########################################################################################################################
# BASE  BUILDOUT
########################################################################################################################


[buildout]
allow-hosts = ${mirrors:allow-hosts}
timeout=3
extensions = buildout.minitagificator mr.developer jarn.setuptoolsfixer buildout.dumppickedversions
dump-picked-versions-file =${buildout:directory}/etc/project/pgolf-kgs.cfg
overwrite-picked-versions-file=true
extends-cache = ${buildout:directory}/etc/cache
# this allow you to run buildout on offline mode and to use only the downloaded plonev3.versions.cfg
extends -= http://dist.plone.org/release/4.0.3/versions.cfg
           http://download.zope.org/Zope2/index/2.12.3/versions.cfg
extends =
    plone/zope2.versions.cfg
    plone/plone4.versions.cfg
    plone/plone4.sources.cfg
    project/patches.cfg
    sys/settings.cfg
    backends/blobstorage.cfg
    project/versions.cfg
    project/sources.cfg
    project/pgolf-kgs.cfg
    project/pgolf.cfg
    apache/apache.cfg
    hudson/pgolf/hudson.cfg
# to enable deliverance support, before uncommenting things there & there, think to add to those extends:
#    deliverance/deliverance.cfg


parts =
    productdistros
    instance
#    instance-worker
    zopepy
    backup
#    instance-cynin
#    maildrophost
#    cynini18noverrides
##    fss-cynin
#    instance-newsletter
##    fss-newsletter
#    fss
#    solr
#    solrinstance
    mkdirs
    omelette
    pgolf.test
    zeoserver
#    deliverance
#    deliverance_ini
#    deliverance_prod_ini
#    deliverance_rules
#    apache_deliverance_vhost
#    deliverance.test
    apache_vhost
# hudson integration
    pgolf_hudson_env
    pgolf_hudson_job
    pgolf_hudson_deploy
    pgolf_hudson_chmod
    chown

find-links = ${groups:find-links}
eggs +=
develop +=
versions = versions
# see http://pypi.python.org/pypi/mr.developer for documentation
# auto tracked developement products, see project/sources.cfg
sources = sources
auto-checkout +=
# Add additional eggs here
eggs =

# Reference any eggs you are developing here, one per line
# e.g.: develop = src/my.package
develop =

# auto tracked developement products, see project/sources.cfg
[sources]


# eggs & scripts installation
[zopepy]
recipe = minitage.recipe.scripts
# Important for you to note the installation of the ZODB as an egg . We will not
# use the zodb code from the zope source distribution !!!!!!!
eggs = ${instance:eggs}
interpreter = zopepy
env-file=${buildout:directory}/etc/pgolf.env

# Use this section to download additional old-style products.
# List any number of URLs for product tarballs under URLs (separate
# with whitespace, or break over several lines, with subsequent lines
# indented). If any archives contain several products inside a top-level
# directory, list the archive file name (i.e. the last part of the URL,
# normally with a .tar.gz suffix or similar) under 'nested-packages'.
# If any archives extract to a product directory with a version suffix, list
# the archive name under 'version-suffix-packages'.
[productdistros]
# For more information on this step and configuration options see:
# http://pypi.python.org/pypi/plone.recipe.distros
recipe = plone.recipe.distros
urls =
nested-packages =
version-suffix-packages =

# here is defined the Zope instance running your plone site
# beware that zopepy part must run before isntance in order to have the right version
# pinned for relstorage
[instance]
order=${zopepy:recipe}
recipe = plone.recipe.zope2instance
http-address=${hosts:instance}:${ports:instance}
user = ${zope:user}:${zope:password}
session-timeout-minutes = ${cache:session-timeout-minutes}
verbose-security=${zope:verbose-security}
debug-mode=${zope:debug-mode}
event-log-level=${zope:event-log-level}
z2-log-level=${zope:z2-log-level}

# KGS generation
[kgs]
recipe=minitage.recipe.printer
quiet=
eggs=${instance:eggs}


[backup]
recipe = collective.recipe.backup

# Traditionnal Plone products to install
[productdistros]
recipe = plone.recipe.distros
urls=${groups:products-urls}
version-suffix-packages = ${groups:version-suffix-packages}
nested-packages = ${groups:nested-packages}

[omelette]
recipe = collective.recipe.omelette
eggs = ${instance:eggs}
products = ${instance:products}
packages =     ./


# Command below is important
# if not, fss tests or tests using fss in their configuration will fail
[mkdirs]
recipe = plone.recipe.command
update-command = ${mkdirs:command}
command +=

[chown]
# This recipe is used to set permissions -- and ownership for root mode installs
recipe = plone.recipe.command
command =
    chmod 600 .installed.cfg
    find ${buildout:directory} -type d -name var -exec chown -R ${users:zope} {} \;
    find ${buildout:eggs-directory} -type d -name LC_MESSAGES -exec chown -R ${users:zope} {} \;
    find ${buildout:eggs-directory}/Products.kupu* -type d -name i18n -exec chown -R ${users:zope} {} \;
    find ${buildout:directory} -name runzope -exec chown ${users:zope} {} \;
    find ${buildout:directory}/var -type d -exec chmod 700 {} \;
    chmod 744 ${buildout:directory}/bin/*
update-command = ${chown:command}




# vim: set ft=cfg:
